@inject Transdim.Service.Services.IScoreAnimationService scoreAnimationService;

@if (scoreAnimationService.IsVisible || scoreAnimationService.IsInAnimatedDismissal)
{
    <div class="transdim-modal-container transdim-modal-active" @onclick="(() => scoreAnimationService.Dismiss())">
        <div class="points-modal-overlay @(
    scoreAnimationService.IsInAnimatedDismissal && scoreAnimationService.FadeOutAfterDismissal ?
        "animated-overlay" :
        string.Empty)">
        </div>
        <div class="row animation-container">
            <span class="col-12 text-center">
                <img
                     class="scored-component @(scoreAnimationService.IsInAnimatedDismissal ? "animated-component" : string.Empty)"
                     src="@scoreAnimationService.ImgSrc"
                     asp-append-version="true" />
            </span>
            <span class="col-12 text-center">
                <img
                     class="scored-points points-image @(scoreAnimationService.IsInAnimatedDismissal ? "animated-points" : string.Empty)"
                     src="@scoreAnimationService.PointsImgSrc"
                     asp-append-version="true" />
            </span>

        </div>
    </div>
}

@functions {
    protected override void OnInitialized()
    {
        scoreAnimationService.StateHasChanged += async () => await InvokeAsync(StateHasChanged);
    }
}