@using Transdim.DomainModel.GameComponents;

@inject Transdim.Service.Controllers.CurrentGame.ScoreTracker.IScoreAnimationOverlayController controller;

@if (showStatic)
{
    <div class="transdim-modal-container transdim-modal-active" onclick="@StartAnimation">

        <div class="points-modal-overlay"></div>
        <div class="row animation-container">
            <span class="col-12 text-center">
                <img class="scored-component" src="@imgSrc" asp-append-version="true" />
            </span>
            <span class="col-12 text-center">
                <img class="scored-points points-image" src="@pointsImgSrc" asp-append-version="true" />
            </span>
        </div>
    </div>
}
@if (showAnimated)
{
    <div class="transdim-modal-container transdim-modal-active" onclick="@StartAnimation">

        <div class="points-modal-overlay @(fadeOutAfterDisplay ? "animated-overlay" : string.Empty)"></div>
        <div class="row animation-container">
            <span class="col-12 text-center">
                <img class="scored-component animated-component" src="@imgSrc" asp-append-version="true" />
            </span>
            <span class="col-12 text-center">
                <img class="scored-points points-image animated-points" src="@pointsImgSrc" asp-append-version="true" />
            </span>

        </div>
    </div>
}

@functions {
    private bool showStatic => controller.ShowStatic;

    private bool showAnimated => controller.ShowAnimated;

    private bool fadeOutAfterDisplay => controller.FadeOutAfterDisplay;

    private string imgSrc => controller.ImgSrc;

    private string pointsImgSrc => controller.PointsImgSrc;

    protected override void OnInit() => controller.OnInit(StateHasChanged, Invoke);

    public void ShowScoredComponent(IGameComponent gameComponent, int points) => controller.ShowScoredComponent(gameComponent, points);

    public void StartAnimation() => controller.StartAnimation();
}