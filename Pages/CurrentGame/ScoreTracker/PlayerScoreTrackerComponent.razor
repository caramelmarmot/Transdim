@using System.Timers;

@inject Transdim.Service.IGameStateService GameStateService;

<div class="col-3 @GetActiveClass(player)" onclick="@StartAnimation" style="background-color:burlywood">@GetScore(player)</div>
@if (showAnimation)
{
    <div class="row">
        <img class="animated" src="/Images/tech-charge-four-power.png" asp-append-version="true" />
    </div>
}

@functions {
    [Parameter]
    private Game game { get; set; }

    [Parameter]
    private Player player { get; set; }

    private bool showAnimation = false;

    private Timer timer;

    protected override void OnInit()
    {
        game = GameStateService.GetGame();
        GameStateService.OnChange += StateHasChanged;
        timer = new Timer(2300);
    }

    // TODO: This needs to be done much better
    public int GetScore(Player player)
    {
        // TODO: move to controller
        var actions = game.GameActions.Where(action => action.Player.Id == player.Id);

        var score = 0;

        foreach (var action in actions)
        {
            score = score + action.Points;
        }

        return score;
    }

    public string GetActiveClass(Player player) =>
        (player.IsActive) ? "active" : "";

    // TODO: this is just scratch
    public void StartAnimation()
    {
        showAnimation = true;
        StateHasChanged();

        timer.Elapsed += FinishAnimation;
        timer.Enabled = true;
    }

    public event Action onAnimationFinish;

    private void FinishAnimation(Object source, ElapsedEventArgs e)
    {
        Invoke(() =>
        {
            timer.Enabled = false;
            showAnimation = false;
            StateHasChanged();
        });
    }
}