@using System.Timers;
@using Transdim.DomainModel.GameComponents;

@inject Transdim.Service.IScoreAnimationService scoreAnimationService;
@inject Transdim.Service.IGameStateService GameStateService;

@if (showAnimation)
{
    <div class="row animation-container">
        <span class="@GetColClass()" >
            <img class="animated" hidden="@IsHidden(0)" src="@imgSrc" asp-append-version="true" />
        </span>
        <span class="@GetColClass()">
            <img class="animated" hidden="@IsHidden(1)" src="@imgSrc" asp-append-version="true" />
        </span>
        @if (game.Players.Count > 2)
        {
            <span class="@GetColClass()">
                <img class="animated" hidden="@IsHidden(2)" src="@imgSrc" asp-append-version="true" />
            </span>
        }
        @if (game.Players.Count > 3)
        {
            <span class="@GetColClass()">
                <img class="animated" hidden="@IsHidden(3)" src="@imgSrc" asp-append-version="true" />
            </span>
        }
    </div>
}

@functions {
    private bool showAnimation = false;

    private Timer timer;

    private string imgSrc;

    private Game game;

    protected override void OnInit()
    {
        timer = new Timer(1550);
        scoreAnimationService.OnScore += StartAnimation;
        scoreAnimationService.OnFinishAnimation += OnFinishAnimation;

        GameStateService.OnChange += StateHasChanged;
        game = GameStateService.GetGame();
    }

    public string GetColClass() {
        if (game.Players.Count == 2)
        {
            return "col-6";
        }

        if (game.Players.Count == 3)
        {
            return "col-4";
        }

        if (game.Players.Count == 4)
        {
            return "col-3";
        }

        throw new InvalidOperationException("Must have between 2 and 4 players");
    }

    public bool IsHidden(int playerIndex) => !game.Players[playerIndex].IsActive;

    public void StartAnimation(IGameComponent gameComponent, int points)
    {
        imgSrc = gameComponent.ImagePath;
        showAnimation = true;
        StateHasChanged();

        timer.Elapsed += FinishAnimation;
        timer.Enabled = true;
    }


    private void FinishAnimation(Object source, ElapsedEventArgs e)
    {
        Invoke(() =>
        {
            timer.Elapsed -= FinishAnimation;
            timer.Enabled = false;
            showAnimation = false;
            scoreAnimationService.FinishAnimation();
        });
    }

    private void OnFinishAnimation()
    {
        StateHasChanged();
    }
}