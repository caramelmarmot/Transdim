@using System.Timers;
@using Transdim.DomainModel.GameComponents;

@inject Transdim.Service.IScoreAnimationService scoreAnimationService;
@inject Transdim.Service.IGameStateService GameStateService;
@inject Transdim.Service.IQueueManagementService QueueManagementService;

@if (showStatic)
{
    <div class="transdim-modal-container transdim-modal-active" onclick="@StartAnimation">

        <div class="points-modal-overlay"></div>
        <div class="row animation-container">
            <ScoredItemDisplayComponent IsHidden="@IsHidden(0)" ImgSrc="@imgSrc" PointsImgSrc="@pointsImgSrc" IsAnimated="false"></ScoredItemDisplayComponent>
            <ScoredItemDisplayComponent IsHidden="@IsHidden(1)" ImgSrc="@imgSrc" PointsImgSrc="@pointsImgSrc" IsAnimated="false"></ScoredItemDisplayComponent>
            @if (game != null && game.Players.Count > 2)
            {
                <ScoredItemDisplayComponent IsHidden="@IsHidden(2)" ImgSrc="@imgSrc" PointsImgSrc="@pointsImgSrc" IsAnimated="false"></ScoredItemDisplayComponent>
            }
            @if (game != null && game.Players.Count > 3)
            {
                <ScoredItemDisplayComponent IsHidden="@IsHidden(3)" ImgSrc="@imgSrc" PointsImgSrc="@pointsImgSrc" IsAnimated="false"></ScoredItemDisplayComponent>
            }
        </div>
    </div>
}
@if (showAnimated)
{
    <div class="transdim-modal-container transdim-modal-active" onclick="@StartAnimation">

        <div class="points-modal-overlay @(fadeOutAfterDisplay ? "animated-overlay" : string.Empty)"></div>
        <div class="row animation-container">
            <ScoredItemDisplayComponent IsHidden="@IsHidden(0)" ImgSrc="@imgSrc" PointsImgSrc="@pointsImgSrc" IsAnimated="true"></ScoredItemDisplayComponent>
            <ScoredItemDisplayComponent IsHidden="@IsHidden(1)" ImgSrc="@imgSrc" PointsImgSrc="@pointsImgSrc" IsAnimated="true"></ScoredItemDisplayComponent>
            @if (game != null && game.Players.Count > 2)
            {
                <ScoredItemDisplayComponent IsHidden="@IsHidden(2)" ImgSrc="@imgSrc" PointsImgSrc="@pointsImgSrc" IsAnimated="true"></ScoredItemDisplayComponent>
            }
            @if (game != null && game.Players.Count > 3)
            {
                <ScoredItemDisplayComponent IsHidden="@IsHidden(3)" ImgSrc="@imgSrc" PointsImgSrc="@pointsImgSrc" IsAnimated="true"></ScoredItemDisplayComponent>
            }
        </div>
    </div>
}

@functions {
    private bool showStatic = false;

    private bool showAnimated = false;

    private bool fadeOutAfterDisplay = true;

    private Timer timer;

    private string imgSrc;

    private string pointsImgSrc;

    private Game game;

    protected override void OnInit()
    {
        timer = new Timer(600);
        scoreAnimationService.OnScore += ShowScoredComponent;
        scoreAnimationService.OnFinishAnimation += OnFinishAnimation;
        GameStateService.OnChange += StateHasChanged;
    }

    public bool IsHidden(int playerIndex)
    {
        game = GameStateService.GetGame();

        if (game == null)
        {
            return true;
        }

        var players = GameStateService.GetCurrentRoundPlayersInOrder();
        return !players[playerIndex].IsActive;
    }

    public void ShowScoredComponent(IGameComponent gameComponent, int points)
    {
        imgSrc = gameComponent.ImagePath;

        var pointsString = (points < 10) ? "0" + points.ToString() : points.ToString();
        pointsImgSrc = $"/Images/points-{pointsString}.png";

        showStatic = true;
        showAnimated = false;
        StateHasChanged();
    }

    private void StartAnimation()
    {
        fadeOutAfterDisplay = !(QueueManagementService.PreviewNextEvent() is IUiComponentScoringEvent);

        showStatic = false;
        showAnimated = true;

        timer.Elapsed += FinishAnimation;
        timer.Enabled = true;

        StateHasChanged();
    }

    private void FinishAnimation(Object source, ElapsedEventArgs e)
    {
        Invoke(() =>
        {
            timer.Elapsed -= FinishAnimation;
            timer.Enabled = false;

            showStatic = false;
            showAnimated = false;
            fadeOutAfterDisplay = false;
            scoreAnimationService.FinishAnimation();
        });
    }

    private void OnFinishAnimation()
    {
        StateHasChanged();
    }
}