@using System.Timers;
@using Transdim.DomainModel.GameComponents;

@inject Transdim.Service.IScoreAnimationService scoreAnimationService;
@inject Transdim.Service.IGameStateService GameStateService;
@inject Transdim.Service.IQueueManagementService QueueManagementService;

<button onclick="@Foo">do it rockapella</button>
@if (showAnimation)
{
    <div class="transdim-modal-container transdim-modal-active">

        <div class="transdim-modal-overlay @(fadeOutAfterDisplay ? "animated-overlay" : string.Empty)"></div>
        <div class="row animation-container">
            <span class="col-12">
                <img class="animated" hidden="@IsHidden(0)" src="@imgSrc" asp-append-version="true" />
            </span>
            <span class="col-12">
                <img class="animated" hidden="@IsHidden(1)" src="@imgSrc" asp-append-version="true" />
            </span>
            @if (game != null && game.Players.Count > 2)
            {
                <span class="col-12">
                    <img class="animated" hidden="@IsHidden(2)" src="@imgSrc" asp-append-version="true" />
                </span>
            }
            @if (game != null && game.Players.Count > 3)
            {
                <span class="col-12">
                    <img class="animated" hidden="@IsHidden(3)" src="@imgSrc" asp-append-version="true" />
                </span>
            }
        </div>
    </div>
}

@functions {
    private bool showAnimation = false;

    private bool fadeOutAfterDisplay = true;

    private Timer timer;

    private string imgSrc;

    private Game game;

    public void Foo()
    {
        showAnimation = !showAnimation;
    }

    protected override void OnInit()
    {
        timer = new Timer(1550);
        scoreAnimationService.OnScore += StartAnimation;
        scoreAnimationService.OnFinishAnimation += OnFinishAnimation;
        GameStateService.OnChange += StateHasChanged;
    }

    public bool IsHidden(int playerIndex)
    {
        game = GameStateService.GetGame();

        if (game == null)
        {
            return true;
        }

        var players = GameStateService.GetCurrentRoundPlayersInOrder();
        return !players[playerIndex].IsActive;
    }

    public void StartAnimation(IGameComponent gameComponent, int points)
    {
        imgSrc = gameComponent.ImagePath;
        showAnimation = true;
        fadeOutAfterDisplay = !(QueueManagementService.PreviewNextEvent() is IUiComponentScoringEvent);
        StateHasChanged();

        timer.Elapsed += FinishAnimation;
        timer.Enabled = true;
    }


    private void FinishAnimation(Object source, ElapsedEventArgs e)
    {
        Invoke(() =>
        {
            timer.Elapsed -= FinishAnimation;
            timer.Enabled = false;
            showAnimation = false;
            fadeOutAfterDisplay = false;
            scoreAnimationService.FinishAnimation();
        });
    }

    private void OnFinishAnimation()
    {
        StateHasChanged();
    }
}