@using  Transdim.Service;
@using  Transdim.Pages.CurrentGame.ActionPanel.PowerAction;
@using  Transdim.Pages.CurrentGame.Common;

@inject Transdim.Service.Services.Modal.IModalService ModalService;

<div class="transdim-modal-container @(ModalService.IsVisible ? "transdim-modal-active" : string.Empty)">

    <div class="transdim-modal-overlay"></div>

    <div class="transdim-modal transdim-modal-transparent">
        @if (!String.IsNullOrEmpty(ModalService.Title))
        {
            <div class="transdim-modal-header">
                <h3 class="transdim-modal-title">@ModalService.Title</h3>
            </div>
        }
        @if (ModalService.CurrentModalIdentifier != ModalIdentifier.None)
        {
            <div class="transdim-modal-content">
                <CascadingValue Value="@ModalService.Parameters">
                    @GetContent()
                </CascadingValue>
            </div>
        }
    </div>
</div>

@functions {
    private bool IsTransparent = true;

    protected override void OnInitialized()
    {
        ModalService.StateHasChanged += async () => await InvokeAsync(StateHasChanged);
    }

    private Dictionary<ModalIdentifier, Type> ModalMapping = new Dictionary<ModalIdentifier, Type>()
    {
        { ModalIdentifier.AdjustablePointsScorer, typeof(AdjustablePointsScorerModal)},
        { ModalIdentifier.PowerActionPicker, typeof(PowerActionModal)}
    };

    private RenderFragment GetContent()
    {
        if (!ModalMapping.TryGetValue(ModalService.CurrentModalIdentifier, out var modalType))
        {
            throw new ArgumentNullException(nameof(modalType));
        }

        return new RenderFragment(x => { x.OpenComponent(1, modalType); x.CloseComponent(); });
    }
}
